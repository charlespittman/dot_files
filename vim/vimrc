" vim: set foldmethod=marker :


set nocompatible

"**NOTE** {{{1
" You'll need to install the vundle plugin for Vim before using this file.  The
" plugins also require Exuberant Ctags and the Powerline module for Python.
"
" It would also be a good idea to check out the 'Key Mappings' section to see
" what has been changed.

" Installing Vundle {{{
" $ git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
" }}}

"Plugin Options {{{1
"==SingleCompile== {{{2
" Compile with <F8> {{{3
nmap <F8> :SCCompile<CR>

" Compile and execute with <F9> {{{3
nmap <F9> :SCCompileRun<CR>

"==Tagbar== {{{2
" Toggle the tagbar with <F7> {{{3
nmap <F7> :TagbarToggle<CR>

" Omit helpbar and saves screen space {{{3
let g:tagbar_compact = 1

" Set icons for open/closed folds {{{3
let g:tagbar_iconchars = ['▸', '▾']

" Unfold scopes  to show tag under the cursor {{{3
let g:tagbar_autoshowtag = 1  " Open closed folds for tag under cursor

"==Vundle== {{{2
" Options {{{3
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Packages {{{3
"original repos on github {{{4
Bundle 'altercation/vim-colors-solarized'
Bundle 'ervandew/supertab'
Bundle 'gmarik/vundle'
Bundle 'godlygeek/tabular'
Bundle 'jcf/vim-latex'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'Lokaltog/vim-powerline'
Bundle 'majutsushi/tagbar'
Bundle 'mattn/zencoding-vim'
Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'oblitum/cSyntaxAfter'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/syntastic'
Bundle 'skammer/vim-css-color'
Bundle 'tomasr/molokai'
Bundle 'tomtom/tcomment_vim'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-sensible'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-unimpaired'
Bundle 'vim-ruby/vim-ruby'
Bundle 'xuhdev/SingleCompile'

"vim-scripts repos {{{4
Bundle 'Align'
Bundle 'bash-support.vim'
Bundle 'camelcasemotion'
Bundle 'DfrankUtil'
Bundle 'indexer.tar.gz'
Bundle 'matchit.zip'
Bundle 'mimicpak'
Bundle 'ScrollColors'
Bundle 'vimprj'
Bundle 'Zenburn'

"non github repos {{{4
"Bundle 'git://git.wincent.com/command-t.git'

"Behavior {{{1
" Disable backup files {{{2
set nobackup

" Save swapfiles to /var/tmp {{{2
set directory=/var/tmp

" Expand <Tab> to appropriate number of spaces {{{2
set expandtab

" Make tabs and backspace smarter about each other {{{2
set smarttab

" Don't automatically save when switching buffers {{{2
set noautowrite

" Hide buffers instead of closing {{{2
set hidden

" Enable omni completion {{{2
set ofu=syntaxcomplete#Complete

" Y yanks from cursor to end of line {{{2
nnoremap Y y$

" Set vsplit to right and hsplit to below {{{2
set splitbelow
set splitright

" Wildmenu (filename completion) {{{2
if has("wildmenu")
    set wildignore+=*.a,*.o
    set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png
    set wildignore+=.DS_Store,.git,.hg,.svn
    set wildignore+=*~,*.swp,*.tmp
    set wildmenu
    set wildmode=longest,list
endif

"Filetype Detection {{{1
filetype on         " Enable filetype detection
filetype indent on  " Enable filetype-specific indenting
filetype plugin on  " Enable filetype-specific plugins

"Syntax Highlighting {{{1
if has("syntax")
  " Let Vim pick colors for the highlighting {{{2
  syntax on

  " Flash a bracket's match {{{2
  set showmatch

  " Print <Tab> and trailing spaces {{{2
  set list listchars=tab:▷⋅,trail:⋅,nbsp:⋅    " Print tabs and trailing spaces

  " Python: Highlight numbers, builtins, std exceptions, & whitespace errors {{{2
  let python_highlight_all = 1

  " Ruby: Highlight operators & space errors {{{2
  let ruby_operators = 1
  let ruby_space_errors = 1
endif

"Folding Options {{{1
if has("folding")
  " Enable syntax folding {{{2
  set foldmethod=syntax

  " Perl- and fold if blocks {{{2
  let perl_fold = 1
  let perl_fold_blocks = 1

  " Ruby {{{2
  let ruby_fold = 1

  " Shell- and fold functions, heredoc, and if/do/for blocks {{{2
  let g:sh_fold_enabled = 7
endif

"Layout {{{1
set number
set shiftwidth=2
set softtabstop=2
set tabstop=2
set textwidth=79

" Super fancy status line {{{2
"python from powerline.ext.vim import source_plugin; source_plugin()

" Always show the status line {{{2
set laststatus=2

"Color Options {{{1
set background=dark
let g:solarized_termtrans = 1
colorscheme solarized

"Search Options {{{1
" Do case insensitive matching if only given lowercase {{{2
set ignorecase
set smartcase

" Search as we type, plus highlight {{{2
if has("extra_search")
  set incsearch
  set hlsearch
endif

" Jumping with n puts the term in the middle of the screen {{{2
nnoremap n nzz
nnoremap N Nzz

"Key Mappings {{{1
" Use jj to exit insert mode {{{2
imap jj <ESC>

" Use q to exit normal mode {{{2
nmap q :q<CR>

" Use ; in place of : {{{2
nnoremap ; :

" Clear search highlighting with ,/ {{{2
nmap <silent> ,/ :nohlsearch<CR>

" Change mapleader from \ to , {{{2
let mapleader = ','

" Use w!! to save using sudo {{{2
cnoreabbrev <expr> w!!
                \((getcmdtype() == ':' && getcmdline() == 'w!!')
                \?('!sudo tee % >/dev/null'):('w!!'))

" Use Q for formatting the current paragraph (or selection) {{{2
vmap Q gq
nmap Q gqap

" Hit <F4> to remove trailing whitespace {{{2
nnoremap <silent> <F4> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" Toggle 'paste' with notification {{{2
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>    " Toggle paste while in Insert mode
set showmode

" Append modeline after last line in buffer. {{{2
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline() " {{{3
  "{{{
  let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set :",
        \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
  let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
  call append(line("$"), l:modeline)
endfunction "}}}
"}}}3
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>

"GVim Settings {{{1
set gfn=Inconsolata\ for\ Powerline\ Medium\ 11

"Asymptote Stuff {{{1
augroup filetypedetect
au BufNewFile,BufRead *.asy     setf asy
augroup END
filetype plugin on

" Source .vimrc.local, if it exists {{{1
if filereadable(glob("~/.vimrc.local"))
    source ~/.vimrc.local
endif
