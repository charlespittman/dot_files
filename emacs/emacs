;; NOTE: 'site-start.el' is always loaded before '.emacs'.  'default.el' always
;; loads after '.emacs'.

(require 'cl)
;; Use a separate file for customizations made through Customize
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)

;; Turn off mouse interface early in startup to avoid momentary display
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)
(defalias 'yes-or-no-p 'y-or-n-p)

;; Set repos for package manager
(load "package")
(package-initialize)
(setq package-archives '(("melpa-stable" . "http://melpa-stable.milkbox.net/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")
                         ("org" . "http://orgmode.org/elpa/")
                         ("gnu" . "http://elpa.gnu.org/packages/")))

(defvar cp/packages '(ample-theme clues-theme
                      color-theme-sanityinc-solarized
                      color-theme-sanityinc-tomorrow
                      distinguished-theme gruvbox-theme
                      use-package)
  "Default packages")

(defun cp/packages-installed-p ()
  (loop for pkg in cp/packages
        when (not (package-installed-p pkg)) do (return nil)
        finally (return t)))

(unless (cp/packages-installed-p)
  (message "%s" "Refreshing package database...")
  (package-refresh-contents)
  (dolist (pkg cp/packages)
    (when (not (package-installed-p pkg))
      (package-install pkg))))

(require 'use-package)

(defun depends--helper (deps body)
  (let ((dep (if (stringp (car deps)) (pop deps) (cons 'quote (list (pop deps))))))
    (list 'eval-after-load dep
          (cons 'lambda (cons nil (if (not deps)
                                      body
                                    (list (depends--helper deps body))))))))

(defmacro depends (&rest args)
  (declare (indent defun))
  (let ((dependencies nil))
    (while (or (stringp (car args))
               (symbolp (car args)))
      (push (pop args) dependencies))
    (depends--helper dependencies args)))

(add-to-list 'load-path "~/.emacs.d/elisp/")

;;;; common-lisp
(use-package cl-lib
  :ensure t)


;;;; auto-complete
(use-package auto-complete
  :ensure t
  :config (global-auto-complete-mode t))


;;;; flycheck
(use-package flycheck
  :init (depends "cc-mode"
          (add-hook 'c-mode-hook 'flycheck-mode)
          (add-hook 'c++-mode-hook 'flycheck-mode))

  :config (progn (use-package flycheck-color-mode-line
                   :config (add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode)
                   :ensure t)


                 (use-package flycheck-pos-tip
                   :config (custom-set-variables
                            '(flycheck-display-errors-function #'flycheck-pos-tip-error-messages))
                   :ensure t))
  :defer t
  :ensure t)


;;;; company
(use-package company
  :defer t
  :ensure t)

;;;; confluence
(use-package confluence
  :init (setq confluence-url "http://confluence.atdesk.com/confluence/rpc/xmlrpc")

  :config (add-hook 'confluence-edit-mode-hook
                    (local-set-key "\C-xw" confluence-prefix-map)
                    (local-set-key "\M-j" 'confluence-newline-and-indent)
                    (local-set-key "\M-;" 'confluence-list-indent-dwim))

  :bind ("C-x w f" . confluence-get-page)
  :defer t
  :ensure t)

(use-package org-jira
  :init (setq jiralib-url "http://jira/jira")
  :defer t
  :ensure t)

(defun open-jira-ticket-at-point ()
  "Open browser with Jira ticket at point."
  (interactive)
  (let ((ticket (thing-at-point 'sexp)))
    (if (eq nil (string-match-p "^[A-z]+-[0-9]+$" ticket))
        (setq ticket (read-from-minibuffer
                      "Not sure if this is a ticket: "
                      ticket)))
    (browse-url
     (concat jiralib-url "/browse/" ticket))))


;;;; eldoc
(use-package eldoc
  :init (add-hook 'prog-mode-hook 'turn-on-eldoc-mode)
  :config (progn (use-package eldoc-extension
                   :ensure t)

                 (use-package c-eldoc
                   :ensure t
                   :config (add-hook 'c-mode-hook 'c-turn-on-eldoc-mode))

                 (use-package org-eldoc
                   :ensure t)))


;;;; haskell
(use-package haskell-mode
  :defer t
  :ensure t
  :config (progn (use-package ghc
                   :ensure t)

                 (use-package ghci-completion
                   :ensure t
                   :config (add-hook 'inferior-haskell-mode-hook 'turn-on-ghci-completion))

                 (use-package flycheck-haskell
                   :ensure t
                   :config (add-hook 'flycheck-mode-hook #'flycheck-haskell-setup))

                 (add-hook 'haskell-mode-hook 'capitalized-words-mode)
                 (add-hook 'haskell-mode-hook 'turn-on-eldoc-mode)
                 (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
                 (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
                 (custom-set-variables '(haskell-process-suggest-remove-import-lines t)
                                       '(haskell-process-auto-import-loaded-modules t)
                                       '(haskell-process-log t)
                                       '(haskell-stylish-on-save t)))
  ;;  :bind (("C-c C-l" . haskell-process-load-or-reload)
  ;;         ("C-`" . haskell-interactive-bring)
  ;;         ("C-c C-t" . haskell-process-do-type)
  ;;         ("C-c C-i" . haskell-process-do-info)
  ;;         ("C-c C-c" . haskell-process-cabal-build)
  ;;         ("C-c C-k" . haskell-interactive-mode-clear)
  ;;         ("C-c c" . haskell-process-cabal)
  ;;         ("SPC" . haskell-mode-contextual-space)))
  )


;;;; ido
(use-package ido
  :ensure t
  :init (setq ido-enable-flex-matching t
              ido-create-new-buffer 'always)
  :config (progn (use-package ido-ubiquitous
                   :ensure t)

                 (use-package ido-vertical-mode
                   :ensure t
                   :init (setq ido-vertical-define-keys 'C-n-C-p-up-down-left-right)
                   :config (ido-vertical-mode t))

                 (ido-mode t)))

;; Listed here because smex is built on ido
(use-package smex
  :ensure t
  :init (setq smex-auto-update 60)
  :config (smex-initialize)
  :bind (("M-x" . smex)
         ("M-X" . smex-major-mode-commands)
         ("M-s-x" . smex-show-unbound-commands)))


;;;; magit
(use-package magit
  :defer t
  :ensure t
  :config (progn
            ;; full screen magit-status
            (defadvice magit-status (around magit-fullscreen activate)
              (window-configuration-to-register :magit-fullscreen)
              ad-do-it
              (delete-other-windows))

            (defun magit-quit-session ()
              "Restores the previous window configuration and kills the magit buffer"
              (interactive)
              (kill-buffer)
              (jump-to-register :magit-fullscreen))

            (define-key magit-status-mode-map (kbd "q") 'magit-quit-session)))


;;;; org-mode
(use-package org
  :init (setq org-log-done t
              org-agenda-files (list "~/org/home.org"
                                     "~/org/work.org"
                                     "~/org/school.org"))

  :config (progn (use-package org-ac
                   :ensure t)
                 (use-package org-bullets
                   :ensure t
                   :config (add-hook 'org-mode-hook 'org-bullets-mode)))

  :bind (("C-c a" . org-agenda)
         ("C-c b" . org-iswitchb)
         ("C-c c" . org-capture)
         ("C-c l" . org-store-link)))


;;;; python
(use-package python
  :defer t
  :ensure t
  :mode ("\\.py\\'" . python-mode)
  :config (progn (use-package elpy
                   :ensure t
                   :init (setq elpy-rpc-backend "jedi")
                   :config (progn (elpy-enable)
                                  (elpy-use-ipython)))))


;;;; slime/quicklisp
(use-package slime
  :load-path "~/.slime/"
  :init (setq inferior-lisp-program "sbcl")
  :config (progn (load (expand-file-name "~/quicklisp/slime-helper.el"))
                 (use-package ac-slime
                   :ensure t))
  :defer t
  :ensure t)


;;;; ocaml
(use-package tuareg
  :defer t
  :ensure t
  :load-path ("~/.opam/system/share/emacs/site-lisp/")

  :mode (("\\.ml[ily]?$" . tuareg-mode)
         ("\\.topml$" . tuareg-mode)
         ("\\.topscript$" . tuareg-mode))

  :config (progn (use-package merlin
                   :init (setq merlin-use-auto-complete-mode t
                               merlin-error-after-save nil)

                   :config (add-hook 'tuareg-mode-hook 'merlin-mode)

                   :bind (("C-c <up>" . merlin-type-enclosing-go-up)
                          ("C-c <down>" . merlin-type-enclosing-go-down)))

                 (use-package utop
                   :config (progn (autoload 'utop-setup-ocaml-buffer "utop" "Toplevel for OCaml" t)
                                  (add-hook 'tuareg-mode-hook 'utop-setup-ocaml-buffer)))

                 (require 'ocp-indent)
                 (ocp-setup-indent)))


;;;; w3m
(use-package w3m
  :init (setq w3m-mode-map (make-sparse-keymap))
                                        ;  :config (progn (require 'w3m-haddock)
                                        ;                 (add-hook 'w3m-display-hook 'w3m-haddock-display))
                                        ;  :bind (("C-c C-d" . haskell-w3m-open-haddock)
                                        ;         ("RET" . w3m-view-this-url)
                                        ;         ("q" . bury-buffer)
                                        ;         ("<mouse-1>" . w3m-maybe-url)
                                        ;         ("<f5>" . w3m-reload-this-page)
                                        ;         ("C-c C-d" . haskell-w3m-open-haddock)
                                        ;         ("M-<left>" . w3m-view-previous-page)
                                        ;         ("M-<right>" . w3m-view-next-page)
                                        ;         ("M-." . w3m-haddock-find-tag)))
  :defer t
  :ensure t)

(defun w3m-maybe-url ()
  (interactive)
  (if (or (equal '(w3m-anchor) (get-text-property (point) 'face))
          (equal '(w3m-arrived-anchor) (get-text-property (point) 'face)))
      (w3m-view-this-url)))


;;;; misc. functions
(defun swap-windows ()
  "If you have 2 windows, it swaps them."
  (interactive)
  (cond ((not (= (count-windows) 2))
         (message "You need exactly 2 windows to do this."))
        (t
         (let* ((w1 (first (window-list)))
                (w2 (second (window-list)))
                (b1 (window-buffer w1))
                (b2 (window-buffer w2))
                (s1 (window-start w1))
                (s2 (window-start w2)))
           (set-window-buffer w1 b2)
           (set-window-buffer w2 b1)
           (set-window-start w1 s2)
           (set-window-start w2 s1)))))

(defun rename-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "sNew name: ")
  (let ((name (buffer-name))
	(filename (buffer-file-name)))
    (if (not filename)
	(message "Buffer '%s' is not visiting a file!" name)
      (if (get-buffer new-name)
          (message "A buffer named '%s' already exists!" new-name)
	(progn 	 (rename-file name new-name 1) 	 (rename-buffer new-name) 	 (set-visited-file-name new-name) 	 (set-buffer-modified-p nil))))))

(defun move-buffer-file (dir)
  "Moves both current buffer and file it's visiting to DIR."
  (interactive "DNew directory: ")
  (let* ((name (buffer-name))
	 (filename (buffer-file-name))
	 (dir
          (if (string-match dir "\\(?:/\\|\\\\)$")
              (substring dir 0 -1) dir))
	 (newname (concat dir "/" name)))

    (if (not filename)
	(message "Buffer '%s' is not visiting a file!" name)
      (progn 	(copy-file filename newname 1) 	(delete-file filename) 	(set-visited-file-name newname) 	(set-buffer-modified-p nil) 	t))))

(defun new-empty-buffer ()
  "Open a new empty buffer."
  (interactive)
  (let ((buf (generate-new-buffer "untitled")))
    (switch-to-buffer buf)
    (funcall (and initial-major-mode))
    (setq buffer-offer-save t)))

(defun kill-this-buffer ()
  "Kills the current buffer without prompting for confirmation."
  (interactive)
  (kill-buffer (current-buffer)))

(defun revert-this-buffer ()
  "Reverts the current buffer from disk without prompting for confirmation."
  (interactive)
  (revert-buffer nil t t)
  (message (concat "Reverted buffer " (buffer-name))))

(defun duplicate-line ()
  "Duplicate the line containing point."
  (interactive)
  (save-excursion
    (let (line-text)
      (goto-char (line-beginning-position))
      (let ((beg (point)))
        (goto-char (line-end-position))
        (setq line-text (buffer-substring beg (point))))
      (if (eobp)
          (insert ?\n)
        (forward-line))
      (open-line 1)
      (insert line-text))))

(defun describe-thing-in-popup ()
  (interactive)
  (let* ((thing (symbol-at-point))
         (help-xref-following t)
         (description (with-temp-buffer
                        (help-mode)
                        (help-xref-interned thing)
                        (buffer-string))))
    (popup-tip description
               :point (point)
               :around t
               :height 30
               :scroll-bar t
               :margin t)))

;;;; emacs lisp
(defun imenu-elisp-sections ()
  (setq imenu-prev-index-position-function nil)
  (add-to-list 'imenu-generic-expression '("Sections" "^;;;; \\(.+\\)$" 1) t))

(add-hook 'emacs-lisp-mode-hook 'imenu-elisp-sections)


;;;; keybindings
(use-package bind-key
  :ensure t
  :config (progn (bind-keys*
                  ("<f5>" . revert-this-buffer)
                  ("<f6>" . align)
                  ("<f7>" . delete-trailing-whitespace)
                  ("<f8>" . whitespace-mode)
                  ("<f9>" . linum-mode)
                  ("<f10>" . magit-status)   ;Git status of current directory
                  ("<f11>" . follow-mode)
                  ("<kp-add>" . split-window-horizontally)
                  ("<kp-divide>" . delete-window)
                  ("<kp-multiply>" . delete-other-windows)
                  ("<kp-subtract>" . split-window-vertically)
                  ("C-x C-d". duplicate-line)
                  ("C-x k" . kill-this-buffer) ;I use this way more often
                  ("C-w" . backward-kill-word)
                  ("C-x C-k" . kill-region)
                  ("C-c C-k" . kill-region)
                  ("C-x M-k" . kill-buffer)
                  ("C-c C-b" . new-empty-buffer)
                  ("M-#" . query-replace-regexp)
                  ("M-<f4>" . apply-macro-to-region-lines)
                  ("M-SPC" . just-one-space)
                  ("M-o" . other-window)
                  )))

(define-key lisp-mode-map (kbd "M-.") 'find-function-at-point)
(define-key lisp-mode-map (kbd "C-;") 'describe-thing-in-popup)

;; Use the forward/back buttons on the mouse
(global-set-key [mouse-8] 'previous-buffer)
(global-set-key [mouse-9] 'next-buffer)

(global-set-key (kbd "C-z") 'repeat)    ;Repeat last command

(defalias 'list-buffers 'ibuffer)

(global-set-key (kbd "C-c C-SPC") 'hs-toggle-hiding)

(eval-after-load "hideshow"
  '(add-to-list 'hs-special-modes-alist
                `(ruby-mode
                  ,(rx (or "def" "class" "module" "{" "[")) ; Block start
                  ,(rx (or "}" "]" "end")) ; Block end
                  ,(rx (or "#" "=begin")) ; Comment start
                  ruby-forward-sexp nil)))

;; Indent line and create new, indented line after current one
(global-set-key (kbd "C-<return>") (lambda () (interactive)
                                     (end-of-line)
                                     (reindent-then-newline-and-indent)))


(setq auto-save-default nil    ; No #auto-save# files
      echo-keystrokes 0.1
      inhibit-startup-screen t ; No startup screen
      make-backup-files nil    ; No backup~ files
      tooltip-delay 0.1        ; (Defaults to 0.7)
      use-dialog-box nil
      user-full-name "Charles Pittman")

;; Note that this line uses setq-default; it sets values only in buffers that
;; do not have their own local values.
(setq-default indent-tabs-mode nil
              tab-always-indent 'complete)

(delete-selection-mode t)
(transient-mark-mode t)
(electric-indent-mode t)
(electric-pair-mode t)
(global-font-lock-mode t) ; syntax highlighting
(global-visual-line-mode t)
(show-paren-mode t)

;; Removing trailing whitespace every time a file is saved.
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; Start mail-mode for any file with 'mutt' in the name.
(add-to-list 'auto-mode-alist '("/mutt" . mail-mode))

(add-to-list 'auto-mode-alist '("\\zsh\\'" . shell-script-mode))


;;;; pos-tip
(use-package pos-tip
  :ensure t)
