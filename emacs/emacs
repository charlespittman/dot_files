;; Use a separate file for customizations made through Customize
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)

;; Turn off mouse interface early in startup to avoid momentary display
(when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

(setq inhibit-startup-screen t)

;; Set repos for package manager
(require 'package)
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")))
(package-initialize)

;;(require 'site-gentoo)

;; Turn on syntax highlighting globally
(global-font-lock-mode t)

;; Shorten confirmation prompts
(defalias 'yes-or-no-p 'y-or-n-p)

;; Don't make *.~ files
(setq make-backup-files nil)

(show-paren-mode t)
(eldoc-mode t)

;; Removing trailing whitespace every time a file is saved.
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; No tabs.  Just use spaces.
(setq-default indent-tabs-mode nil)

;; make typing overwrite text selection
(delete-selection-mode t)

;; turn on automatic bracket insertion by pairs.
;;(electric-pair-mode t)

(global-visual-line-mode t)

(setq make-backup-files nil) ; stop creating those backup~ files
(setq auto-save-default nil) ; stop creating those #auto-save# files

;;; Lisp (SLIME) interaction
(load (expand-file-name "~/quicklisp/slime-helper.el"))
;; Replace "sbcl" with the path to your implementation
(setq inferior-lisp-program "sbcl")
(add-to-list 'load-path "~/.slime")

;; (add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode)

(require 'use-package)

(use-package color-theme-sanityinc-tomorrow
  :ensure t
  :config (load-theme 'sanityinc-tomorrow-bright))

(use-package ruby-mode
  :mode "\\.rb\\'"
  :interpreter "ruby")

(use-package python
  :mode ("\\.py\\'" . python-mode)
  :config (progn
            (use-package elpy
              :ensure t
              :init (setq elpy-rpc-backend "jedi")
              :config (progn
                        (elpy-enable)
                        (elpy-use-ipython)
                        (elpy-clean-modeline)))
            (use-package flymake-python-pyflakes
              :init (setq flymake-python-pyflakes-executable "flake8")
              :config (add-hook 'python-mode-hook 'flymake-python-pyflakes-load))))

(use-package nyan-mode)

(use-package haskell-mode
  :config (progn
            (use-package flymake-haskell-multi
              :ensure t
              :config (add-hook 'haskell-mode-hook 'flymake-haskell-multi-load))
            (add-hook 'haskell-mode-hook 'capitalized-words-mode)
            (add-hook 'haskell-mode-hook 'turn-on-eldoc-mode)
            (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
            (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
            (custom-set-variables '(haskell-process-suggest-remove-import-lines t)
                                  '(haskell-process-auto-import-loaded-modules t)
                                  '(haskell-process-log t))
            (define-key haskell-mode-map (kbd "C-c C-l") 'haskell-process-load-or-reload)
            (define-key haskell-mode-map (kbd "C-`") 'haskell-interactive-bring)
            (define-key haskell-mode-map (kbd "C-c C-t") 'haskell-process-do-type)
            (define-key haskell-mode-map (kbd "C-c C-i") 'haskell-process-do-info)
            (define-key haskell-mode-map (kbd "C-c C-c") 'haskell-process-cabal-build)
            (define-key haskell-mode-map (kbd "C-c C-k") 'haskell-interactive-mode-clear)
            (define-key haskell-mode-map (kbd "C-c c") 'haskell-process-cabal)
            (define-key haskell-mode-map (kbd "SPC") 'haskell-mode-contextual-space)
            (custom-set-variables '(haskell-stylish-on-save t))
            (require 'w3m-haddock)
            (add-hook 'w3m-display-hook 'w3m-haddock-display)
            (define-key haskell-mode-map (kbd "C-c C-d") 'haskell-w3m-open-haddock)))

(use-package w3m
  :init (setq w3m-mode-map (make-sparse-keymap))
  :config (progn
            (define-key w3m-mode-map (kbd "RET") 'w3m-view-this-url)
            (define-key w3m-mode-map (kbd "q") 'bury-buffer)
            (define-key w3m-mode-map (kbd "<mouse-1>") 'w3m-maybe-url)
            (define-key w3m-mode-map [f5] 'w3m-reload-this-page)
            (define-key w3m-mode-map (kbd "C-c C-d") 'haskell-w3m-open-haddock)
            (define-key w3m-mode-map (kbd "M-<left>") 'w3m-view-previous-page)
            (define-key w3m-mode-map (kbd "M-<right>") 'w3m-view-next-page)
            (define-key w3m-mode-map (kbd "M-.") 'w3m-haddock-find-tag)

            (defun w3m-maybe-url ()
              (interactive)
              (if (or (equal '(w3m-anchor) (get-text-property (point) 'face))
                      (equal '(w3m-arrived-anchor) (get-text-property (point) 'face)))
                  (w3m-view-this-url)))))

;; Start mail-mode for any file with 'mutt' in the name.
(add-to-list 'auto-mode-alist '("/mutt" . mail-mode))

(add-to-list 'auto-mode-alist '("\\zsh\\'" . shell-script-mode))

(add-to-list 'load-path "~/.emacs.d/elisp/")
(load-library "keys")
